apiVersion: apps/v1
kind: Deployment
metadata:
  name: quay-mirror
  labels:
    quay-component: quay-mirror
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      quay-component: quay-mirror
  template:
    metadata:
      labels:
        quay-component: quay-mirror
    spec:
      serviceAccountName: quay-app
      volumes:
        - name: config
          projected:
            sources:
            - secret:
                name: quay-config-secret
            - secret:
                name: quay-config-tls
        - name: extra-ca-certs
          projected:
            sources:
              - configMap:
                  name: cluster-service-ca
              - secret:
                  name: quay-config-tls
                  items:
                    - key: ssl.cert
                      path: quay-ssl.cert
      initContainers:
        - name: quay-mirror-init
          image: quay.io/projectquay/quay@sha256:5660d7174218e1cb21bf6ef406602dbe8c01c878c630a9f310fe3e5560d4c2cd
          command:
            - /bin/sh
            - -c
            - curl $QUAY_APP_SERVICE_HOST --connect-timeout 360
          env:
            - name: QUAY_APP_SERVICE_HOST
              value: $(QUAY_APP_SERVICE_HOST)
      containers:
        - name: quay-mirror
          image: quay.io/projectquay/quay@sha256:5660d7174218e1cb21bf6ef406602dbe8c01c878c630a9f310fe3e5560d4c2cd
          command: ["/quay-registry/quay-entrypoint.sh"]
          args: ["repomirror-nomigrate"]
          env:
            - name: QE_K8S_CONFIG_SECRET
              # FIXME: Using `vars` is kinda ugly because it's basically templating, but this needs to be the generated `Secret` name...
              value: $(QE_K8S_CONFIG_SECRET)
            - name: QE_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEBUGLOG
              value: "false"
            - name: ENSURE_NO_MIGRATION
              value: "true"
          # TODO: Determine if we need to set resource requirements
          startupProbe:
            httpGet:
              path: /health/instance
              port: 8443
              scheme: HTTPS
            timeoutSeconds: 20
            periodSeconds: 15
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /health/instance
              port: 8443
              scheme: HTTPS
          livelinessProbe:
            httpGet:
              path: /health/instance
              port: 8443
              scheme: HTTPS
          volumeMounts:
            - name: config
              readOnly: false
              mountPath: /conf/stack
            - name: extra-ca-certs
              readOnly: true
              mountPath: /conf/stack/extra_ca_certs
